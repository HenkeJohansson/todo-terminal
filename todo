#!/usr/bin/env bash

PROJ_PATH="$HOME/.todos_haj/"
TODOS_PATH="$HOME/.todos_haj/todos/"

function listTodos {
  if [[ -z "$1" ]]; then
    missingParameters
  fi

  clear

  TODO_AMOUNT=$(wc -l "$TODOS_PATH$1.txt" | awk '{print $1}')
  if [[ $TODO_AMOUNT -gt 0 ]]; then
    echo "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"
    echo "$1 HAS $TODO_AMOUNT TODOS"
    echo "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"
    LINE_NR=1
    while read line; do
      echo "☆ ($LINE_NR) $line"
      (( LINE_NR++ ))
    done < "$TODOS_PATH$1".txt
    echo "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"
  else
    echo "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"
    echo "$1 HAS $TODO_AMOUNT TODOS"
    echo "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"
  fi
}

function getTodos {
  TODO_AMOUNT=$(wc -l "$1" | awk '{print $1}')
  if [[ $TODO_AMOUNT -gt 0 ]]; then
    LINE_NR=1
    while read LINE; do
      echo "☆ ($LINE_NR) $LINE"
      (( LINE_NR++ ))
    done < "$1"
  else
    echo "Has $TODO_AMOUNT todos"
  fi
}

function listAllTodos {
  PROJECT_AMOUNT=$(ls -l "$TODOS_PATH" | wc -l)

  if [[ $PROJECT_AMOUNT -gt 0 ]]; then
    clear
    
    divider "☆"
    # center "ALL TODOS" "~"
    for FILE in "$TODOS_PATH"*.txt; do
      FILE_NAME=$(basename $FILE | cut -f 1 -d '.')
      # if [[ $FILE_NAME != 'test' && $FILE_NAME != 'unlistedProjects' ]]; then
      if ! grep -q $FILE_NAME "$PROJ_PATH"unlistedProjects.txt; then
        # echo "☆☆☆ $FILE_NAME ☆☆☆" | tr a-z A-Z
        center "$FILE_NAME" "~"
        getTodos "$FILE"
      fi
    done
    divider "☆"
  fi
    
}

function delTodo {
  # OSX ships with BSD sed, where the suffix is mandatory.
  # That's the reason for '' after -i
  if [[ -z "$1" || -z "$2" ]]; then
    missingParameters
  fi
  
  sed -i '' "$1d" "$TODOS_PATH$2.txt"
}

function clearAllTodos {
  if [[ -z "$1" ]]; then
    missingParameters
  fi

  > "$TODOS_PATH"$1.txt
}

function delTodos {
  echo "1: $1 2: $2"
  if [[ -z "$1" || -z "$2" ]]; then
    missingParameters
  fi

  LINES_DEL=""
  COUNTER=1
  for LINE in $@; do
    if [[ $COUNTER -gt 2 ]]; then
      LINES_DEL+="$LINE"
      LINES_DEL+="d"

      if [[ $COUNTER -lt $# ]]; then
        LINES_DEL+=";"
      fi

    fi
    (( COUNTER++ ))
  done

  sed -i '' "$LINES_DEL" "$TODOS_PATH$2.txt"
}

function addTodo {
  if [[ -z "$1" || -z "$2" ]]; then
    missingParameters
  fi

  if [ ! -f "$TODOS_PATH$1".txt ]; then
    echo "Project not found"
    exit 1
  fi
  
  (cd "$TODOS_PATH" && echo "$2" >> "$1".txt && sort -o "$1".txt "$1".txt)
}

function listProjects {
  (cd "$TODOS_PATH" && ls -1 | sed -e 's/\..*$//' | sed 's/^/☆ /')
}

function unlistProject {
  if [[ -z "$1" ]]; then
    missingParameters
  fi

  UNLIST_FILE="unlistedProjects.txt"

  if [[ -e "$PROJ_PATH"$UNLIST_FILE ]]; then
    echo "$PROJ_PATH"$UNLIST_FILE
    if grep -Fxq "$1" "$PROJ_PATH$UNLIST_FILE"; then
      (cd "$PROJ_PATH" && echo "$1" >> $UNLIST_FILE)
    else
      echo "$1 already unlisted"
    fi
  else
    (cd "$PROJ_PATH" && touch unlistedProjects.txt && echo "$1" >> unlistedProjects.txt)
  fi

}

function createProject {
  if [[ -z "$1" ]]; then
    missingParameters
  fi

  mkdir -p "$HOME/.todos_haj/todos"

  (cd "$TODOS_PATH" && touch "$1".txt)
}

function displayInstructions {
  echo "☆ Create project: todo create <projectname>"
  echo "☆ Add todo to project: todo add <task> <projectname>"
  echo "☆ List todos in project: todo list <projectname>"
  echo "☆ List todos in all projects: todo listall"
  echo "☆ List projects: todo projects"
  echo "☆ Delete todo: todo del <projectname> <tasknumber> <tasknumber> etc."
  echo "☆ Clear all todos from projet: todo clearall <projectname>"
}

function missingParameters {
  echo "Parameters are missing"
  exit 1
}

function center {
  TERM_WIDTH="$(tput cols)"
  PADDING="$(printf '%0.1s' $2{1..500})"
  printf '%*.*s %s %*.*s\n' 0 "$(((TERM_WIDTH-2-${#1})/2))" "$PADDING" "$1" 0 "$(((TERM_WIDTH-1-${#1})/2))" "$PADDING"
}

function divider {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' $1
}

if [[ "$1" == "create" ]]; then
  # $2 = project name
  createProject "$2"
elif [[ "$1" == "add" ]]; then
  # $2 = project name
  # $3 = todo name
  addTodo "$2" "$3"
  # listTodos "$2"
  listAllTodos
elif [[ "$1" == "del" ]]; then
  # $2 project name
  # All else todo nr
  delTodos "$@"
  # listTodos "$2"
  listAllTodos
elif [[ "$1" == 'clearall' ]]; then
  clearAllTodos "$2"
  listAllTodos
elif [[ "$1" == "list" ]]; then
 # $2 = project name
  listTodos "$2"
elif [[ "$1" == "listall" ]]; then
  listAllTodos
elif [[ "$1" == "unlist" ]]; then
  unlistProject "$2"
elif [[ "$1" == "help" ]]; then
  displayInstructions
elif [[ "$1" == "projects" ]]; then
  listProjects
fi